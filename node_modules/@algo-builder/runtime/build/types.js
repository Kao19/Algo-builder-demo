"use strict";
/* eslint-disable no-unused-vars */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Base64Encoding = exports.DecodingMode = exports.ExecutionMode = exports.TxOnComplete = exports.EncodingType = exports.GlobalField = exports.TxnType = void 0;
var TxnType;
(function (TxnType) {
    TxnType["unknown"] = "0";
    TxnType["pay"] = "1";
    TxnType["keyreg"] = "2";
    TxnType["acfg"] = "3";
    TxnType["axfer"] = "4";
    TxnType["afrz"] = "5";
    TxnType["appl"] = "6";
})(TxnType = exports.TxnType || (exports.TxnType = {}));
var GlobalField;
(function (GlobalField) {
    GlobalField[GlobalField["MinTxnFee"] = 0] = "MinTxnFee";
    GlobalField[GlobalField["MinBalance"] = 1] = "MinBalance";
    GlobalField[GlobalField["MaxTxnLife"] = 2] = "MaxTxnLife";
    GlobalField[GlobalField["ZeroAddress"] = 3] = "ZeroAddress";
    GlobalField[GlobalField["GroupSize"] = 4] = "GroupSize";
    GlobalField[GlobalField["LogicSigVersion"] = 5] = "LogicSigVersion";
    GlobalField[GlobalField["Round"] = 6] = "Round";
    GlobalField[GlobalField["LatestTimestamp"] = 7] = "LatestTimestamp";
    GlobalField[GlobalField["CurrentApplicationID"] = 8] = "CurrentApplicationID";
})(GlobalField = exports.GlobalField || (exports.GlobalField = {}));
var EncodingType;
(function (EncodingType) {
    EncodingType[EncodingType["BASE64"] = 0] = "BASE64";
    EncodingType[EncodingType["BASE32"] = 1] = "BASE32";
    EncodingType[EncodingType["HEX"] = 2] = "HEX";
    EncodingType[EncodingType["UTF8"] = 3] = "UTF8";
})(EncodingType = exports.EncodingType || (exports.EncodingType = {}));
/**
 * https://developer.algorand.org/docs/reference/teal/specification/#oncomplete */
var TxOnComplete;
(function (TxOnComplete) {
    TxOnComplete["NoOp"] = "0";
    TxOnComplete["OptIn"] = "1";
    TxOnComplete["CloseOut"] = "2";
    TxOnComplete["ClearState"] = "3";
    TxOnComplete["UpdateApplication"] = "4";
    TxOnComplete["DeleteApplication"] = "5";
})(TxOnComplete = exports.TxOnComplete || (exports.TxOnComplete = {}));
/**
 * https://developer.algorand.org/docs/reference/teal/specification/#execution-modes */
var ExecutionMode;
(function (ExecutionMode) {
    ExecutionMode[ExecutionMode["SIGNATURE"] = 0] = "SIGNATURE";
    ExecutionMode[ExecutionMode["APPLICATION"] = 1] = "APPLICATION";
})(ExecutionMode = exports.ExecutionMode || (exports.ExecutionMode = {}));
/**
 * SDK decoding types (Configure how the integer will be decoded)
 * https://github.com/algorand/js-algorand-sdk/blob/develop/src/encoding/uint64.ts#L29
 */
var DecodingMode;
(function (DecodingMode) {
    DecodingMode["SAFE"] = "safe";
    DecodingMode["MIXED"] = "mixed";
    DecodingMode["BIGINT"] = "bigint";
})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));
var Base64Encoding;
(function (Base64Encoding) {
    Base64Encoding[Base64Encoding["URL"] = 0] = "URL";
    Base64Encoding[Base64Encoding["STD"] = 1] = "STD";
})(Base64Encoding = exports.Base64Encoding || (exports.Base64Encoding = {}));
//# sourceMappingURL=types.js.map