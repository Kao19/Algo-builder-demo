import { types } from "@algo-builder/web";
import { Transaction } from "algosdk";
import { Interpreter } from "..";
import { Op } from "../interpreter/opcode";
import { ITxn, ITxna } from "../interpreter/opcode-list";
import { Context, EncTx, StackElem, TxField } from "../types";
export declare const assetTxnFields: Set<string>;
export declare function parseToStackElem(a: unknown, field: TxField): StackElem;
/**
 * Check if given transaction is asset deletion
 * @param txn EncTx Object
 * Logic:
 * https://developer.algorand.org/docs/reference/transactions/#asset-configuration-transaction
 * https://github.com/algorand/js-algorand-sdk/blob/e07d99a2b6bd91c4c19704f107cfca398aeb9619/src/transaction.ts#L528
 */
export declare function checkIfAssetDeletionTx(txn: Transaction): boolean;
/**
 * Description: returns specific transaction field value from tx object
 * @param txField: transaction field
 * @param tx Current transaction
 * @param txns Transaction group
 * @param tealVersion version of TEAL
 */
export declare function txnSpecByField(txField: string, tx: EncTx, gtxns: EncTx[], tealVersion: number): StackElem;
/**
 * Returns specific transaction field value from array
 * of accounts or application args
 * @param tx current transaction
 * @param txField transaction field
 * @param idx index in EncodedTransaction[txField]
 * @param op Op object
 * @param tealVersion version of TEAL
 * @param line line number in TEAL file
 */
export declare function txAppArg(txField: TxField, tx: EncTx, idx: number, op: Op, interpreter: Interpreter, line: number): StackElem;
/**
 * Check if given encoded transaction obj is asset deletion
 * @param txn Encoded EncTx Object
 * Logic:
 * https://developer.algorand.org/docs/reference/transactions/#asset-configuration-transaction
 * https://github.com/algorand/js-algorand-sdk/blob/e07d99a2b6bd91c4c19704f107cfca398aeb9619/src/transaction.ts#L528
 */
export declare function isEncTxAssetDeletion(txn: EncTx): boolean;
/**
 * Check if given encoded transaction obj is asset deletion
 * @param txn Encoded EncTx Object
 */
export declare function isEncTxAssetConfig(txn: EncTx): boolean;
/**
 * Check if given encoded transaction object is app creation
 * @param txn Encoded EncTx Object
 */
export declare function isEncTxApplicationCreate(txn: EncTx): boolean;
/**
 * Check if given encoded transaction object is application call
 * @param txn Encode EncTx Object
 */
export declare function isEncTxApplicationCall(txn: EncTx): boolean;
/**
 *
 * @param txAndSign transaction and sign
 * @param ctx context which is tx and sign apply
 * @returns ExecParams object equivalent with txAndSign
 */
export declare function transactionAndSignToExecParams(txAndSign: types.TransactionAndSign, ctx: Context): types.ExecParams;
export declare function encTxToExecParams(encTx: EncTx, sign: types.Sign, ctx: Context, line?: number): types.ExecParams;
export interface CreditFeeType {
    remainingFee: number;
    collectedFee: number;
    requiredFee: number;
}
/**
 *
 * @param groupTx group transaction
 * @returns remainingFee - fee remaining after execute group Tx
 * 			collected fee - fee collected from group Tx
 * 			required fee - fee require to execute group tx
 */
export declare function calculateFeeCredit(groupTx: EncTx[]): CreditFeeType;
/**
 * Retunrs field f of the last inner transaction
 * @param op ITxna or ITxn opcode
 * @returns result
 */
export declare function executeITxn(op: ITxna | ITxn): StackElem;
