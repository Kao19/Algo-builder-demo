"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mkTxParams = exports.getSuggestedParams = exports.algoexplorerAlgod = void 0;
const algosdk_1 = require("algosdk");
function algoexplorerAlgod(walletURL) {
    return new algosdk_1.Algodv2(walletURL.token, walletURL.server, walletURL.port);
}
exports.algoexplorerAlgod = algoexplorerAlgod;
/**
 * Returns blockchain transaction suggested parameters (firstRound, lastRound, fee..)
 * @param algocl an Algorand client, instance of Algodv2, used to communicate with a blockchain node.
 */
async function getSuggestedParams(algocl) {
    const params = await algocl.getTransactionParams().do();
    const genesisInfo = await algocl.genesis().do();
    // Private chains may have an issue with firstRound
    if (!genesisInfo.devmode && params.firstRound === 0) {
        throw new Error("Suggested params returned 0 as firstRound. Ensure that your node progresses.");
    }
    return params;
}
exports.getSuggestedParams = getSuggestedParams;
/**
 * Returns a union object of custom transaction params and suggested params.
 * @param algocl an Algorand client, instance of Algodv2, used to communicate with a blockchain node.
 * @param userParams a dict containing custom params defined by the user
 * @param s suggested transaction params
 */
async function mkTxParams(algocl, userParams, s) {
    if (s === undefined) {
        s = await getSuggestedParams(algocl);
    }
    if (userParams.flatFee === undefined) {
        s.flatFee = userParams.totalFee !== undefined;
    }
    s.fee = userParams.totalFee || userParams.feePerByte || algosdk_1.ALGORAND_MIN_TX_FEE; // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing
    s.firstRound = userParams.firstValid || s.firstRound; // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing
    s.lastRound =
        userParams.firstValid === undefined || userParams.validRounds === undefined // eslint-disable-line @typescript-eslint/prefer-nullish-coalescing
            ? s.lastRound
            : Number(userParams.firstValid) + Number(userParams.validRounds);
    return s;
}
exports.mkTxParams = mkTxParams;
//# sourceMappingURL=api.js.map