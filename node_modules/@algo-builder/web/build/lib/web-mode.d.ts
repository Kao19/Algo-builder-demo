import algosdk, { SuggestedParams } from "algosdk";
import { AlgoSigner, JsonPayload, WalletTransaction } from "../algo-signer-types";
import { ExecParams, TransactionAndSign, TxParams } from "../types";
export declare class WebMode {
    algoSigner: AlgoSigner;
    chainName: string;
    constructor(algoSigner: AlgoSigner, chainName: string);
    /**
     * wait for confirmation for transaction using transaction id
     * @param txId Transaction id
     */
    waitForConfirmation(txId: string): Promise<algosdk.modelsv2.PendingTransactionResponse>;
    /**
     * Send transaction to network
     * @param signedTxn signed transaction
     */
    sendTransaction(signedTxn: any): Promise<JsonPayload>;
    /**
     * Send group transaction to network
     * @param signedTxs signed transaction group
     */
    sendGroupTransaction(signedTxs: any): Promise<JsonPayload>;
    /**
     * Sign transaction using algosigner
     * @param txns Array of transactions in base64
     */
    signTransaction(txns: WalletTransaction[]): Promise<JsonPayload>;
    /**
     * Returns suggested transaction parameters using algosigner
     * @param userParams Transaction parameters
     */
    getSuggestedParams(userParams: TxParams): Promise<SuggestedParams>;
    /**
     * Execute single transaction or group of transactions (atomic transaction)
     * @param transactions transaction parameters, atomic transaction parameters
     * or TransactionAndSign object(SDK transaction object and signer parameters)
     */
    executeTx(transactions: ExecParams[] | TransactionAndSign[]): Promise<algosdk.modelsv2.PendingTransactionResponse>;
    /** @deprecated */
    executeTransaction(execParams: ExecParams | ExecParams[]): Promise<JsonPayload>;
}
