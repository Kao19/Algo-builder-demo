import type { Accounts, Address, AlgorandTxn, Base64, ConnectionSettings, EncodedTransaction, SignedTx } from "@randlabs/myalgo-connect";
import algosdk from "algosdk";
import { ExecParams, HttpNetworkConfig, TransactionInGroup } from "../types";
interface MyAlgoConnect {
    /**
     * @async
     * @description Receives user's accounts from MyAlgo.
     * @param {ConnectionSettings} [settings] Connection settings
     * @returns Returns an array of Algorand addresses.
     */
    connect(settings?: ConnectionSettings): Promise<Accounts[]>;
    /**
     * @async
     * @description Sign an Algorand Transaction.
     * @param transaction Expect a valid Algorand transaction
     * @returns Returns signed transaction
     */
    signTransaction(transaction: AlgorandTxn | EncodedTransaction): Promise<SignedTx>;
    /**
     * @async
     * @description Sign an Algorand Transaction.
     * @param transaction Expect a valid Algorand transaction array.
     * @returns Returns signed an array of signed transactions.
     */
    signTransaction(transaction: (AlgorandTxn | EncodedTransaction)[]): Promise<SignedTx[]>;
    /**
     * @async
     * @description Sign a teal program
     * @param logic Teal program
     * @param address Signer Address
     * @returns Returns signed teal
     */
    signLogicSig(logic: Uint8Array | Base64, address: Address): Promise<Uint8Array>;
}
export declare class MyAlgoWalletSession {
    connector: MyAlgoConnect;
    private readonly algodClient;
    accounts: Accounts[];
    addresses: Address[];
    constructor(walletURL: HttpNetworkConfig, connector?: MyAlgoConnect);
    connectToMyAlgo(): Promise<void>;
    /**
     * https://connect.myalgo.com/docs/interactive-examples/PaymentTransaction
     * Sign a single transaction from a my algo wallet session
     * @param txn { SDK transaction object, shouldSign, signers, msig } object
     * @returns raw signed txn
     */
    signTransaction(txn: algosdk.Transaction): Promise<SignedTx>;
    /**
     * https://connect.myalgo.com/docs/interactive-examples/GroupedTransaction
     * Sign a group of transaction(s) from a my algo wallet session
     * @param txns { SDK transaction object, shouldSign, signers, msig } object
     * @returns array of raw signed txns | null. null representes that the txn in array is NOT signed
     * by wallet user (i.e signable by someone else).
     */
    signTransactionGroup(txns: TransactionInGroup[]): Promise<SignedTx[]>;
    /**
     * Send signed transaction to network and wait for confirmation
     * @param rawTxns Signed Transaction(s)
     */
    private sendAndWait;
    private waitForConfirmation;
    /**
     * Execute single transaction or group of transactions (atomic transaction)
     * @param execParams transaction parameters or atomic transaction parameters
     */
    executeTx(execParams: ExecParams[]): Promise<algosdk.modelsv2.PendingTransactionResponse>;
    /** @deprecated */
    executeTransaction(execParams: ExecParams | ExecParams[]): Promise<algosdk.modelsv2.PendingTransactionResponse>;
}
export {};
