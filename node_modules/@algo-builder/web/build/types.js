"use strict";
/* eslint-disable no-unused-vars */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainType = exports.isSDKTransactionAndSign = exports.isSDKTransaction = exports.isRequestError = exports.isFileError = exports.MetaType = exports.TransactionType = exports.SignType = void 0;
var SignType;
(function (SignType) {
    SignType[SignType["SecretKey"] = 0] = "SecretKey";
    SignType[SignType["LogicSignature"] = 1] = "LogicSignature";
})(SignType = exports.SignType || (exports.SignType = {}));
var TransactionType;
(function (TransactionType) {
    TransactionType[TransactionType["TransferAlgo"] = 0] = "TransferAlgo";
    TransactionType[TransactionType["TransferAsset"] = 1] = "TransferAsset";
    TransactionType[TransactionType["KeyRegistration"] = 2] = "KeyRegistration";
    TransactionType[TransactionType["ModifyAsset"] = 3] = "ModifyAsset";
    TransactionType[TransactionType["FreezeAsset"] = 4] = "FreezeAsset";
    TransactionType[TransactionType["RevokeAsset"] = 5] = "RevokeAsset";
    TransactionType[TransactionType["DestroyAsset"] = 6] = "DestroyAsset";
    TransactionType[TransactionType["CallApp"] = 7] = "CallApp";
    TransactionType[TransactionType["ClearApp"] = 8] = "ClearApp";
    TransactionType[TransactionType["CloseApp"] = 9] = "CloseApp";
    TransactionType[TransactionType["DeleteApp"] = 10] = "DeleteApp";
    TransactionType[TransactionType["DeployASA"] = 11] = "DeployASA";
    TransactionType[TransactionType["DeployApp"] = 12] = "DeployApp";
    TransactionType[TransactionType["OptInASA"] = 13] = "OptInASA";
    TransactionType[TransactionType["OptInToApp"] = 14] = "OptInToApp";
    TransactionType[TransactionType["UpdateApp"] = 15] = "UpdateApp";
})(TransactionType = exports.TransactionType || (exports.TransactionType = {}));
var MetaType;
(function (MetaType) {
    MetaType[MetaType["FILE"] = 0] = "FILE";
    MetaType[MetaType["SOURCE_CODE"] = 1] = "SOURCE_CODE";
    MetaType[MetaType["BYTES"] = 2] = "BYTES";
})(MetaType = exports.MetaType || (exports.MetaType = {}));
// This function is used to check if given objects implements `FileError` interface
function isFileError(object) {
    return Object.prototype.hasOwnProperty.call(object, "errno");
}
exports.isFileError = isFileError;
// This function is used to check if given objects implements `RequestError` interface
// https://www.technicalfeeder.com/2021/02/how-to-check-if-a-object-implements-an-interface-in-typescript/
function isRequestError(object) {
    const res = Object.prototype.hasOwnProperty.call(object, "response.statusCode") &&
        Object.prototype.hasOwnProperty.call(object, "response.text") &&
        Object.prototype.hasOwnProperty.call(object, "response.body.message") &&
        Object.prototype.hasOwnProperty.call(object, "response.error");
    return res && Object.prototype.hasOwnProperty.call(object, "error");
}
exports.isRequestError = isRequestError;
// This function checks if given object implements `Transaction` class
function isSDKTransaction(object) {
    if (object === undefined || object === null) {
        return false;
    }
    const props = ["tag", "from", "fee", "firstRound", "lastRound", "genesisID", "genesisHash"];
    let res = Object.prototype.hasOwnProperty.call(object, "name");
    for (const prop of props) {
        res = res && Object.prototype.hasOwnProperty.call(object, prop);
    }
    return res;
}
exports.isSDKTransaction = isSDKTransaction;
// This function checks if given object implements `Transaction` class and has Sign
function isSDKTransactionAndSign(object) {
    if (object === undefined || object === null) {
        return false;
    }
    const res = isSDKTransaction(object.transaction);
    return Object.prototype.hasOwnProperty.call(object, "sign") && res;
}
exports.isSDKTransactionAndSign = isSDKTransactionAndSign;
/* Wallet Connect types */
var ChainType;
(function (ChainType) {
    ChainType["MainNet"] = "MainNet";
    ChainType["TestNet"] = "TestNet";
    ChainType["BetaNet"] = "BetaNet";
})(ChainType = exports.ChainType || (exports.ChainType = {}));
//# sourceMappingURL=types.js.map